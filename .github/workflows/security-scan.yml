name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "üîç Running npm audit..."
          npm audit --audit-level high

      - name: Run npm audit fix
        if: failure()
        run: |
          echo "üîß Attempting to fix vulnerabilities..."
          npm audit fix --dry-run

  # Code security analysis
  code-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Secret scanning
  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Dockerfile security scan
  dockerfile-scan:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint on API Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: apps/api/Dockerfile

      - name: Run Hadolint on Web Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: apps/web/Dockerfile

  # Environment variable validation
  env-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate environment configuration
        run: |
          echo "üîç Validating environment configuration..."

          # Check that all required environment variables are documented
          echo "Checking .env.example completeness..."

          # Extract required env vars from code
          required_vars=$(grep -r "process\.env\." apps/ packages/ --include="*.ts" --include="*.js" | \
            grep -o 'process\.env\.[A-Z_]*' | \
            sort | uniq | \
            sed 's/process\.env\.//')

          echo "Required environment variables found in code:"
          echo "$required_vars"

          # Check if they exist in .env.example
          missing_vars=""
          for var in $required_vars; do
            if ! grep -q "^$var=" .env.example && ! grep -q "^#.*$var=" .env.example; then
              missing_vars="$missing_vars $var"
            fi
          done

          if [ -n "$missing_vars" ]; then
            echo "‚ùå Missing environment variables in .env.example:"
            echo "$missing_vars"
            exit 1
          else
            echo "‚úÖ All environment variables are documented"
          fi

  # Container image scanning
  container-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build API image for scanning
        run: |
          docker build -f apps/api/Dockerfile -t api-scan:latest .

      - name: Build Web image for scanning
        run: |
          docker build -f apps/web/Dockerfile -t web-scan:latest . \
            --build-arg VITE_API_URL=http://localhost:3001/api \
            --build-arg VITE_SOLANA_NETWORK=devnet \
            --build-arg VITE_SOLANA_RPC_URL=https://api.devnet.solana.com

      - name: Run Trivy vulnerability scanner on API
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'api-scan:latest'
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Run Trivy vulnerability scanner on Web
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'web-scan:latest'
          format: 'sarif'
          output: 'trivy-web-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-api-results.sarif'

      - name: Upload Trivy web scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-web-results.sarif'

  # Generate security report
  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security, secret-scan, env-validation]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "üõ°Ô∏è Security Scan Summary"
          echo "========================"
          echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "Code Security: ${{ needs.code-security.result }}"
          echo "Secret Scan: ${{ needs.secret-scan.result }}"
          echo "Environment Validation: ${{ needs.env-validation.result }}"

          if [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.code-security.result }}" == "failure" ]] || \
             [[ "${{ needs.secret-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.env-validation.result }}" == "failure" ]]; then
            echo "‚ùå Security issues detected - review the security tab"
            exit 1
          else
            echo "‚úÖ All security scans passed"
          fi