name: CD - Deploy to Railway

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI - Test and Build"]
    types:
      - completed
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Check if CI workflow passed
  check-ci:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Check CI status
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Detect what needs to be deployed
  changes:
    runs-on: ubuntu-latest
    needs: check-ci
    if: ${{ needs.check-ci.outputs.should-deploy == 'true' }}
    outputs:
      api: ${{ steps.filter.outputs.api }}
      web: ${{ steps.filter.outputs.web }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'packages/shared/**'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
            web:
              - 'apps/web/**'
              - 'packages/shared/**'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'

  # Deploy API to Railway
  deploy-api:
    runs-on: ubuntu-latest
    needs: [check-ci, changes]
    if: ${{ needs.check-ci.outputs.should-deploy == 'true' && needs.changes.outputs.api == 'true' }}
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy API to Railway
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway up --service api
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment
        run: sleep 30

      - name: Health check API
        run: |
          echo "Performing health check..."
          max_attempts=10
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            if curl -f "${{ secrets.API_HEALTH_URL }}/health"; then
              echo "‚úÖ API health check passed"
              break
            else
              echo "‚ùå API health check failed (attempt $attempt/$max_attempts)"
              if [ $attempt -eq $max_attempts ]; then
                echo "Health check failed after $max_attempts attempts"
                exit 1
              fi
              sleep 10
              attempt=$((attempt + 1))
            fi
          done

  # Deploy Web to Railway
  deploy-web:
    runs-on: ubuntu-latest
    needs: [check-ci, changes, deploy-api]
    if: ${{ always() && needs.check-ci.outputs.should-deploy == 'true' && needs.changes.outputs.web == 'true' && (needs.deploy-api.result == 'success' || needs.deploy-api.result == 'skipped') }}
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy Web to Railway
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway up --service web
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment
        run: sleep 30

      - name: Health check Web
        run: |
          echo "Performing health check..."
          max_attempts=10
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            if curl -f "${{ secrets.WEB_HEALTH_URL }}"; then
              echo "‚úÖ Web health check passed"
              break
            else
              echo "‚ùå Web health check failed (attempt $attempt/$max_attempts)"
              if [ $attempt -eq $max_attempts ]; then
                echo "Health check failed after $max_attempts attempts"
                exit 1
              fi
              sleep 10
              attempt=$((attempt + 1))
            fi
          done

  # Post-deployment tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    if: ${{ always() && (needs.deploy-api.result == 'success' || needs.deploy-web.result == 'success') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: |
          echo "Running post-deployment integration tests..."
          # You can add specific integration test commands here
          # For now, we'll do basic connectivity tests
          curl -f "${{ secrets.API_HEALTH_URL }}/health"
          curl -f "${{ secrets.WEB_HEALTH_URL }}"
        env:
          API_BASE_URL: ${{ secrets.API_HEALTH_URL }}
          WEB_BASE_URL: ${{ secrets.WEB_HEALTH_URL }}

  # Deployment notification
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web, integration-tests]
    if: always()

    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ Deployment Summary"
          echo "===================="
          echo "API Deployment: ${{ needs.deploy-api.result }}"
          echo "Web Deployment: ${{ needs.deploy-web.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"

          if [[ "${{ needs.deploy-api.result }}" == "success" ]] || [[ "${{ needs.deploy-web.result }}" == "success" ]]; then
            echo "‚úÖ Deployment completed successfully"
            echo "üåê Application URL: ${{ secrets.WEB_HEALTH_URL }}"
            echo "üì° API URL: ${{ secrets.API_HEALTH_URL }}"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

  # Rollback on failure
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web, integration-tests]
    if: ${{ always() && (needs.deploy-api.result == 'failure' || needs.deploy-web.result == 'failure' || needs.integration-tests.result == 'failure') }}
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Rollback deployment
        run: |
          echo "üîÑ Initiating rollback procedure..."
          railway login --token ${{ secrets.RAILWAY_TOKEN }}

          # Get the previous deployment and rollback
          # This is a simplified rollback - in production you might want more sophisticated rollback logic
          echo "Rolling back to previous deployment..."
          echo "Manual intervention may be required"

          # Notify about rollback
          echo "‚ùå Deployment failed, rollback initiated"
          echo "Check Railway dashboard for manual rollback if needed"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}